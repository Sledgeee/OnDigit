// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnDigit.Infrastructure.Data;

namespace OnDigit.Infrastructure.Migrations
{
    [DbContext(typeof(OnDigitDbContext))]
    [Migration("20220415101851_refresh")]
    partial class refresh
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CartEdition", b =>
                {
                    b.Property<string>("BasketsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EditionsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BasketsId", "EditionsId");

                    b.HasIndex("EditionsId");

                    b.ToTable("CartEdition");
                });

            modelBuilder.Entity("VividBooks.Core.Models.CartModel.Cart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("VividBooks.Core.Models.EditionModel.Edition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("AverageStars")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Editions");

                    b.HasData(
                        new
                        {
                            Id = "235c13dd-9bd0-437c-991b-563166730db8",
                            AverageStars = 5f,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Book1",
                            GenreId = 1,
                            Name = "Book1",
                            Price = 9.99m
                        },
                        new
                        {
                            Id = "7c977be4-a8d6-4cdb-ae88-c643dceda08d",
                            AverageStars = 4.4f,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Book2",
                            GenreId = 2,
                            Name = "Book2",
                            Price = 9.99m
                        },
                        new
                        {
                            Id = "4094d7d3-fef7-4163-bb58-2327ff79e304",
                            AverageStars = 3.2f,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Book3",
                            GenreId = 3,
                            Name = "Book3",
                            Price = 9.99m
                        },
                        new
                        {
                            Id = "f7eaf08d-9bb2-4ce0-8ac3-0595f062ece9",
                            AverageStars = 3f,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Book4",
                            GenreId = 4,
                            Name = "Book4",
                            Price = 9.99m
                        },
                        new
                        {
                            Id = "3b158b3d-4eb5-40df-9962-94b851fde246",
                            AverageStars = 2f,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Book5",
                            GenreId = 5,
                            Name = "Book5",
                            Price = 9.99m
                        },
                        new
                        {
                            Id = "811f3329-50f8-462b-825d-5bc49b450810",
                            AverageStars = 1f,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Book6",
                            GenreId = 6,
                            Name = "Book6",
                            Price = 9.99m
                        },
                        new
                        {
                            Id = "f04d394c-f86d-4bbd-b358-180e4857a846",
                            AverageStars = 0.6f,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Book7",
                            GenreId = 7,
                            Name = "Book7",
                            Price = 9.99m
                        },
                        new
                        {
                            Id = "490c1641-04de-4b5c-abd3-89602af716f4",
                            AverageStars = 0f,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Book8",
                            GenreId = 8,
                            Name = "Book8",
                            Price = 9.99m
                        },
                        new
                        {
                            Id = "33315d76-367f-48b6-8cc9-729c2609a9b0",
                            AverageStars = 0f,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Book9",
                            GenreId = 9,
                            Name = "Book9",
                            Price = 9.99m
                        },
                        new
                        {
                            Id = "f0b18ca6-acf7-4ca3-8556-13d761d48b2b",
                            AverageStars = 0f,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Book10",
                            GenreId = 10,
                            Name = "Book10",
                            Price = 9.99m
                        },
                        new
                        {
                            Id = "1c251f3b-fab7-42e2-a254-0869840e0e21",
                            AverageStars = 0f,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Book11",
                            GenreId = 11,
                            Name = "Book11",
                            Price = 9.99m
                        },
                        new
                        {
                            Id = "969afe8b-69ec-45d8-9db9-fc1863237228",
                            AverageStars = 0f,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Book12",
                            GenreId = 12,
                            Name = "Book12",
                            Price = 9.99m
                        },
                        new
                        {
                            Id = "9acddcb8-d03a-46e8-b214-f917ddde3f79",
                            AverageStars = 0f,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Book13",
                            GenreId = 13,
                            Name = "Book13",
                            Price = 9.99m
                        },
                        new
                        {
                            Id = "eb225b1b-247b-45cc-bdaa-507f2ac60e2f",
                            AverageStars = 0f,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Book14",
                            GenreId = 14,
                            Name = "Book14",
                            Price = 9.99m
                        },
                        new
                        {
                            Id = "00ccf23e-ed85-43bc-904f-dac593dadfc2",
                            AverageStars = 0f,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Book15",
                            GenreId = 15,
                            Name = "Book15",
                            Price = 9.99m
                        });
                });

            modelBuilder.Entity("VividBooks.Core.Models.GenreModel.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Detective"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Adventures"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Novel"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Scientific Book"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Folklore"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Humor"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Poetry"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Prose"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Children's Books"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Documentary Literature"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Education Book"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Equipment"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Business Literature"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Religious Literature"
                        });
                });

            modelBuilder.Entity("VividBooks.Core.Models.OrderEditionModel.OrderEdition", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EditionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId", "EditionId");

                    b.HasIndex("EditionId");

                    b.ToTable("OrderEditions");
                });

            modelBuilder.Entity("VividBooks.Core.Models.OrderModel.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("DateOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("VividBooks.Core.Models.ResetTokenModel.ResetToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ResetToken");
                });

            modelBuilder.Entity("VividBooks.Core.Models.ReviewModel.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EditionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EditionId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("VividBooks.Core.Models.RoleModel.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Owner"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("VividBooks.Core.Models.SessionModel.Session", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MACHINE_KEY")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("VividBooks.Core.Models.UserFavoritesModel.UserFavorites", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EditionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "EditionId");

                    b.HasIndex("EditionId");

                    b.ToTable("UserFavorites");
                });

            modelBuilder.Entity("VividBooks.Core.Models.UserLoginHistoryModel.UserLoginHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("DateLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UsersLoginHistory");
                });

            modelBuilder.Entity("VividBooks.Core.Models.UserModel.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("SessionCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CartEdition", b =>
                {
                    b.HasOne("VividBooks.Core.Models.CartModel.Cart", null)
                        .WithMany()
                        .HasForeignKey("BasketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VividBooks.Core.Models.EditionModel.Edition", null)
                        .WithMany()
                        .HasForeignKey("EditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VividBooks.Core.Models.CartModel.Cart", b =>
                {
                    b.HasOne("VividBooks.Core.Models.UserModel.User", "User")
                        .WithMany("Baskets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VividBooks.Core.Models.EditionModel.Edition", b =>
                {
                    b.HasOne("VividBooks.Core.Models.GenreModel.Genre", "Genre")
                        .WithMany("Editions")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("VividBooks.Core.Models.OrderEditionModel.OrderEdition", b =>
                {
                    b.HasOne("VividBooks.Core.Models.EditionModel.Edition", "Edition")
                        .WithMany("OrdersEditions")
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("VividBooks.Core.Models.OrderModel.Order", "Order")
                        .WithMany("OrdersEditions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Edition");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("VividBooks.Core.Models.OrderModel.Order", b =>
                {
                    b.HasOne("VividBooks.Core.Models.UserModel.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("VividBooks.Core.Models.ResetTokenModel.ResetToken", b =>
                {
                    b.HasOne("VividBooks.Core.Models.UserModel.User", "User")
                        .WithMany("ResetTokens")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VividBooks.Core.Models.ReviewModel.Review", b =>
                {
                    b.HasOne("VividBooks.Core.Models.EditionModel.Edition", "Edition")
                        .WithMany("Reviews")
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("VividBooks.Core.Models.UserModel.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Edition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VividBooks.Core.Models.SessionModel.Session", b =>
                {
                    b.HasOne("VividBooks.Core.Models.UserModel.User", "User")
                        .WithOne("Session")
                        .HasForeignKey("VividBooks.Core.Models.SessionModel.Session", "UserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("VividBooks.Core.Models.UserFavoritesModel.UserFavorites", b =>
                {
                    b.HasOne("VividBooks.Core.Models.EditionModel.Edition", "Edition")
                        .WithMany("UserFavorites")
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VividBooks.Core.Models.UserModel.User", "User")
                        .WithMany("UserFavorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Edition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VividBooks.Core.Models.UserLoginHistoryModel.UserLoginHistory", b =>
                {
                    b.HasOne("VividBooks.Core.Models.UserModel.User", "User")
                        .WithOne("UserLoginHistory")
                        .HasForeignKey("VividBooks.Core.Models.UserLoginHistoryModel.UserLoginHistory", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VividBooks.Core.Models.UserModel.User", b =>
                {
                    b.HasOne("VividBooks.Core.Models.RoleModel.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("VividBooks.Core.Models.EditionModel.Edition", b =>
                {
                    b.Navigation("OrdersEditions");

                    b.Navigation("Reviews");

                    b.Navigation("UserFavorites");
                });

            modelBuilder.Entity("VividBooks.Core.Models.GenreModel.Genre", b =>
                {
                    b.Navigation("Editions");
                });

            modelBuilder.Entity("VividBooks.Core.Models.OrderModel.Order", b =>
                {
                    b.Navigation("OrdersEditions");
                });

            modelBuilder.Entity("VividBooks.Core.Models.RoleModel.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("VividBooks.Core.Models.UserModel.User", b =>
                {
                    b.Navigation("Baskets");

                    b.Navigation("Orders");

                    b.Navigation("ResetTokens");

                    b.Navigation("Reviews");

                    b.Navigation("Session");

                    b.Navigation("UserFavorites");

                    b.Navigation("UserLoginHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
