// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnDigit.Infrastructure.Data;

#nullable disable

namespace OnDigit.Infrastructure.Migrations
{
    [DbContext(typeof(OnDigitDbContext))]
    partial class OnDigitDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("OnDigit.Core.Models.BookModel.Book", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("varchar(8000)");

                    b.Property<decimal>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUri")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<float>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f);

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = "432e30a0-33fa-4616-8c9b-a50b27700fae",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description1",
                            Discount = 0m,
                            GenreId = 2,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = true,
                            Name = "Book1",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "8c12be19-d216-4df3-966c-f2ed5b16ace0",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description2",
                            Discount = 0m,
                            GenreId = 14,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = true,
                            Name = "Book2",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "17143afc-379f-45ce-87d2-27d9bf3faca0",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description3",
                            Discount = 0m,
                            GenreId = 10,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = true,
                            Name = "Book3",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "2c5b24f0-a030-42db-bec6-95a39102a9a2",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description4",
                            Discount = 47.491432644032317m,
                            GenreId = 12,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = true,
                            Name = "Book4",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "c5cbebdb-cfdf-400e-aed8-31b3b66291ba",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description5",
                            Discount = 0m,
                            GenreId = 2,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = true,
                            Name = "Book5",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "e960fbb3-007d-43dc-8bce-1c347538b1e7",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description6",
                            Discount = 97.247277450192874m,
                            GenreId = 3,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = true,
                            Name = "Book6",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "ab0506e0-b70a-4f08-9df8-e7711900eb32",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description7",
                            Discount = 47.911132307922261m,
                            GenreId = 12,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = true,
                            Name = "Book7",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "50b25bcf-af5b-46e1-a411-2a36cfc30b30",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description8",
                            Discount = 0m,
                            GenreId = 3,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = true,
                            Name = "Book8",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "a9bf3a0f-e1b3-40d2-a35d-de31cecf51aa",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description9",
                            Discount = 47.5742752937831m,
                            GenreId = 8,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = true,
                            Name = "Book9",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "60b6aca7-1acc-4b1d-8f67-ac93641d8b04",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description10",
                            Discount = 0m,
                            GenreId = 5,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = true,
                            Name = "Book10",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "78bb579b-f2cd-419f-a985-d675e2f2146b",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description11",
                            Discount = 63.542441549263047m,
                            GenreId = 9,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = true,
                            Name = "Book11",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "138b0c65-8527-4eca-bfb7-c8fc9938f6a3",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description12",
                            Discount = 63.433727758335325m,
                            GenreId = 11,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = true,
                            Name = "Book12",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "78dab882-efb1-4f1b-91a1-611c369cbe43",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description13",
                            Discount = 0m,
                            GenreId = 4,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = true,
                            Name = "Book13",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "edb04080-62ac-4021-80a6-ed72ef3759bc",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description14",
                            Discount = 51.667206423513967m,
                            GenreId = 15,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = true,
                            Name = "Book14",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "8d3db767-d7be-4511-b4d3-9e9863f9409d",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description15",
                            Discount = 40.382233171487189m,
                            GenreId = 11,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = true,
                            Name = "Book15",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "2acd19ea-971c-4b8d-904c-de7ab44f5af3",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description16",
                            Discount = 39.830987457635901m,
                            GenreId = 2,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = true,
                            Name = "Book16",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "fd7e8518-72bc-4399-94a9-f63353925805",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description17",
                            Discount = 0m,
                            GenreId = 8,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = true,
                            Name = "Book17",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "2446ec6a-626f-4386-9f08-5bce23cb007a",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description18",
                            Discount = 0m,
                            GenreId = 15,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = true,
                            Name = "Book18",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "28d229a9-d137-4940-a2e4-d8175b577821",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description19",
                            Discount = 3.0242093929395321m,
                            GenreId = 14,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = true,
                            Name = "Book19",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "4203a37d-fb7d-4abc-ba59-9d2396b4f201",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description20",
                            Discount = 0m,
                            GenreId = 10,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = true,
                            Name = "Book20",
                            Price = 9.99m,
                            Rating = 0f
                        });
                });

            modelBuilder.Entity("OnDigit.Core.Models.GenreModel.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Detective"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Adventures"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Novel"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Scientific book"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Folklore"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Humor"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Poetry"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Prose"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Childrens book"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Documentary literature"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Education book"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Equipment"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Business literature"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Religious literature"
                        });
                });

            modelBuilder.Entity("OnDigit.Core.Models.OrderBookModel.OrdersBooks", b =>
                {
                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("BookId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderNumber", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("OrdersBooks");
                });

            modelBuilder.Entity("OnDigit.Core.Models.OrderModel.Order", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("DateOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DeliveryAddress")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("DeliveryCompany")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Fullname")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("OrderStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("PayStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalBooksQuantity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("Number");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OnDigit.Core.Models.PaymentModel.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("DatePayment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("OnDigit.Core.Models.PaymentModel.Wallet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CVV")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ExpiryDate")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("OnDigit.Core.Models.ResetTokenModel.ResetToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ResetTokens");
                });

            modelBuilder.Entity("OnDigit.Core.Models.ReviewModel.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BookId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("OnDigit.Core.Models.SaleModel.Sale", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BookId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime>("DateSaled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("OnDigit.Core.Models.SessionModel.Session", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsCanceledInAdvance")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MACHINE_KEY")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("OnDigit.Core.Models.UserFavoriteModel.UserFavorite", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BookId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("UserFavorites");
                });

            modelBuilder.Entity("OnDigit.Core.Models.UserLoginHistoryModel.UserLoginHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DateLogined")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UsersLoginHistory");
                });

            modelBuilder.Entity("OnDigit.Core.Models.UserModel.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OnDigit.Core.Models.WarehouseModel.Package", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BookId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.HasIndex("WarehouseId");

                    b.ToTable("Packages");

                    b.HasData(
                        new
                        {
                            Id = "e34d3de7-f35a-4bbe-b870-f2863c5fe26c",
                            BookId = "432e30a0-33fa-4616-8c9b-a50b27700fae",
                            Quantity = 24,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = "cc80c6b8-35a9-42b8-a061-2e99cd3149bf",
                            BookId = "8c12be19-d216-4df3-966c-f2ed5b16ace0",
                            Quantity = 167,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = "0c579657-6b93-41a2-b25d-360d983999d7",
                            BookId = "17143afc-379f-45ce-87d2-27d9bf3faca0",
                            Quantity = 473,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = "ef7d4696-7575-488b-b228-a6c78da3bc8a",
                            BookId = "2c5b24f0-a030-42db-bec6-95a39102a9a2",
                            Quantity = 428,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = "7766d61a-7361-4aeb-ba62-63696cd180f5",
                            BookId = "c5cbebdb-cfdf-400e-aed8-31b3b66291ba",
                            Quantity = 302,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = "214e2d0c-0051-4644-b8d9-5c51f52a7565",
                            BookId = "e960fbb3-007d-43dc-8bce-1c347538b1e7",
                            Quantity = 408,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = "a88c9b62-87b3-4a32-a98e-63e747e802c6",
                            BookId = "ab0506e0-b70a-4f08-9df8-e7711900eb32",
                            Quantity = 370,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = "f6bb0fc9-9970-4253-8432-a5344be0e3d8",
                            BookId = "50b25bcf-af5b-46e1-a411-2a36cfc30b30",
                            Quantity = 194,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = "7a2c34fa-7741-4163-9bcb-05a305df50a2",
                            BookId = "a9bf3a0f-e1b3-40d2-a35d-de31cecf51aa",
                            Quantity = 160,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = "f37562f5-c750-4041-a720-2f3e9a2cdf1a",
                            BookId = "60b6aca7-1acc-4b1d-8f67-ac93641d8b04",
                            Quantity = 239,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = "f32c902e-21c6-4ed1-b0ec-81b801d0985d",
                            BookId = "78bb579b-f2cd-419f-a985-d675e2f2146b",
                            Quantity = 406,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = "e875935b-68ab-41e9-bd74-34e8da59bc98",
                            BookId = "138b0c65-8527-4eca-bfb7-c8fc9938f6a3",
                            Quantity = 3,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = "004f02d0-6742-492e-864c-e1e88e6def61",
                            BookId = "78dab882-efb1-4f1b-91a1-611c369cbe43",
                            Quantity = 3,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = "84a98707-a136-49cf-81e9-8648ff9d7269",
                            BookId = "edb04080-62ac-4021-80a6-ed72ef3759bc",
                            Quantity = 289,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = "1f0d0028-50fc-4765-b9db-032ee048eded",
                            BookId = "8d3db767-d7be-4511-b4d3-9e9863f9409d",
                            Quantity = 142,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = "c79080c1-93e1-4fa1-b8db-cae2cde2fdf1",
                            BookId = "2acd19ea-971c-4b8d-904c-de7ab44f5af3",
                            Quantity = 322,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = "9963b53f-1b55-45d0-ba0e-44656f9a4c73",
                            BookId = "fd7e8518-72bc-4399-94a9-f63353925805",
                            Quantity = 405,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = "63696b72-ea5f-4c89-a243-317de2ea9e48",
                            BookId = "2446ec6a-626f-4386-9f08-5bce23cb007a",
                            Quantity = 299,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = "b846a31c-864d-4ac4-93bd-0d9de248bfac",
                            BookId = "28d229a9-d137-4940-a2e4-d8175b577821",
                            Quantity = 228,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = "0ee196dc-c93f-40ae-a5f7-a8dda29cc5d4",
                            BookId = "4203a37d-fb7d-4abc-ba59-9d2396b4f201",
                            Quantity = 278,
                            WarehouseId = 1
                        });
                });

            modelBuilder.Entity("OnDigit.Core.Models.WarehouseModel.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Khmelnytskyi",
                            Street = "Institutska 11/3"
                        },
                        new
                        {
                            Id = 2,
                            City = "Polonne",
                            Street = "Gerasymchuka 12"
                        });
                });

            modelBuilder.Entity("OnDigit.Core.Models.BookModel.Book", b =>
                {
                    b.HasOne("OnDigit.Core.Models.GenreModel.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("OnDigit.Core.Models.OrderBookModel.OrdersBooks", b =>
                {
                    b.HasOne("OnDigit.Core.Models.BookModel.Book", "Book")
                        .WithMany("OrdersBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnDigit.Core.Models.OrderModel.Order", "Order")
                        .WithMany("OrdersBooks")
                        .HasForeignKey("OrderNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OnDigit.Core.Models.OrderModel.Order", b =>
                {
                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.PaymentModel.Payment", b =>
                {
                    b.HasOne("OnDigit.Core.Models.OrderModel.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("OnDigit.Core.Models.PaymentModel.Payment", "OrderNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.PaymentModel.Wallet", b =>
                {
                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.ResetTokenModel.ResetToken", b =>
                {
                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithOne("ResetToken")
                        .HasForeignKey("OnDigit.Core.Models.ResetTokenModel.ResetToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.ReviewModel.Review", b =>
                {
                    b.HasOne("OnDigit.Core.Models.BookModel.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.SaleModel.Sale", b =>
                {
                    b.HasOne("OnDigit.Core.Models.BookModel.Book", "Book")
                        .WithMany("Sales")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("OnDigit.Core.Models.SessionModel.Session", b =>
                {
                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.UserFavoriteModel.UserFavorite", b =>
                {
                    b.HasOne("OnDigit.Core.Models.BookModel.Book", "Book")
                        .WithMany("UserFavorites")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithMany("UserFavorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.UserLoginHistoryModel.UserLoginHistory", b =>
                {
                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.WarehouseModel.Package", b =>
                {
                    b.HasOne("OnDigit.Core.Models.BookModel.Book", "Book")
                        .WithOne("Package")
                        .HasForeignKey("OnDigit.Core.Models.WarehouseModel.Package", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnDigit.Core.Models.WarehouseModel.Warehouse", "Warehouse")
                        .WithMany("Packages")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("OnDigit.Core.Models.BookModel.Book", b =>
                {
                    b.Navigation("OrdersBooks");

                    b.Navigation("Package");

                    b.Navigation("Reviews");

                    b.Navigation("Sales");

                    b.Navigation("UserFavorites");
                });

            modelBuilder.Entity("OnDigit.Core.Models.GenreModel.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("OnDigit.Core.Models.OrderModel.Order", b =>
                {
                    b.Navigation("OrdersBooks");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("OnDigit.Core.Models.UserModel.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("ResetToken");

                    b.Navigation("Reviews");

                    b.Navigation("Sessions");

                    b.Navigation("UserFavorites");

                    b.Navigation("UserLogins");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("OnDigit.Core.Models.WarehouseModel.Warehouse", b =>
                {
                    b.Navigation("Packages");
                });
#pragma warning restore 612, 618
        }
    }
}
