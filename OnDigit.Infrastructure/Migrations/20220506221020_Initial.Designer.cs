// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnDigit.Infrastructure.Data;

#nullable disable

namespace OnDigit.Infrastructure.Migrations
{
    [DbContext(typeof(OnDigitDbContext))]
    [Migration("20220506221020_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("OnDigit.Core.Models.BookModel.Book", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<string>("StockPackageId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = "68cbca3f-7cba-4713-9677-33fdafaa3d48",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description1",
                            GenreId = 1,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = false,
                            Name = "Book1",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "3e5f4b04-f71b-449c-bfba-15e83eb9ab13",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description2",
                            GenreId = 9,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = false,
                            Name = "Book2",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "42d90b2a-f63d-4f11-bb0d-16feaf7152f2",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description3",
                            GenreId = 9,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = false,
                            Name = "Book3",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "e169d412-f8af-4770-8aa7-8fe5d6c5a89f",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description4",
                            GenreId = 8,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = false,
                            Name = "Book4",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "17018893-e88b-4395-969e-5bf0c0729dfd",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description5",
                            GenreId = 11,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = false,
                            Name = "Book5",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "336f32a5-ed86-458a-8a3f-123737f6becb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description6",
                            GenreId = 13,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = false,
                            Name = "Book6",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "967569be-5358-4274-886d-43cc52751e67",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description7",
                            GenreId = 6,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = false,
                            Name = "Book7",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "8cf43f33-0230-4819-b22a-496cd8ed69b1",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description8",
                            GenreId = 13,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = false,
                            Name = "Book8",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "315a7f9c-038b-4189-9096-56ec0a8a7d6d",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description9",
                            GenreId = 5,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = false,
                            Name = "Book9",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "b5d2c12b-aa6b-4257-bdcd-5236d7d12388",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description10",
                            GenreId = 6,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = false,
                            Name = "Book10",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "80597f36-d7ca-4d01-a801-9443643cc2b2",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description11",
                            GenreId = 13,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = false,
                            Name = "Book11",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "cb9d22a0-e3ab-44ee-a093-330dd05e1f16",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description12",
                            GenreId = 6,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = false,
                            Name = "Book12",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "0acfe7e3-4386-4d86-a4bd-a7ab92b69752",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description13",
                            GenreId = 5,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = false,
                            Name = "Book13",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "8d08172a-6577-4ea3-a0b8-a5643ab80391",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description14",
                            GenreId = 1,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = false,
                            Name = "Book14",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "83ddc51b-85ed-4974-8942-1ccf4cedf691",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description15",
                            GenreId = 9,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = false,
                            Name = "Book15",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "055c86ee-226d-47a9-99a3-f33a846a11ac",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description16",
                            GenreId = 1,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = false,
                            Name = "Book16",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "63af3195-bb7a-43c5-8cda-0f92115b0831",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description17",
                            GenreId = 7,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = false,
                            Name = "Book17",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "04d6a1d0-2371-4ac1-b02b-1c3d6235a1ca",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description18",
                            GenreId = 14,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = false,
                            Name = "Book18",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "486b0b35-ca79-42d3-aa1e-016ee05acc72",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description19",
                            GenreId = 12,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = false,
                            Name = "Book19",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "fca422fb-c417-46a4-b7cb-da0f48fd8447",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description20",
                            GenreId = 4,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            IsAvailable = false,
                            Name = "Book20",
                            Price = 9.99m,
                            Rating = 0f
                        });
                });

            modelBuilder.Entity("OnDigit.Core.Models.GenreModel.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Detective"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Adventures"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Novel"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Scientific Book"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Folklore"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Humor"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Poetry"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Prose"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Children's Books"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Documentary Literature"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Education Book"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Equipment"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Business Literature"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Religious Literature"
                        });
                });

            modelBuilder.Entity("OnDigit.Core.Models.OrderBookModel.OrdersBooks", b =>
                {
                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("BookId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderNumber", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("OrdersBooks");
                });

            modelBuilder.Entity("OnDigit.Core.Models.OrderModel.Order", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Number"), 1L, 1);

                    b.Property<DateTime>("DateOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Processing");

                    b.Property<decimal>("TotalPrice")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Number");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OnDigit.Core.Models.ResetTokenModel.ResetToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("ResetToken");
                });

            modelBuilder.Entity("OnDigit.Core.Models.ReviewModel.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("OnDigit.Core.Models.SessionModel.Session", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCanceledInAdvance")
                        .HasColumnType("bit");

                    b.Property<string>("MACHINE_KEY")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("OnDigit.Core.Models.StockModel.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Khmelnytskyi",
                            Street = "Institutska 11/3"
                        },
                        new
                        {
                            Id = 2,
                            City = "Polonne",
                            Street = "Gerasymchuka 12"
                        });
                });

            modelBuilder.Entity("OnDigit.Core.Models.StockModel.StockPackage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.HasIndex("StockId");

                    b.ToTable("StockPackages");

                    b.HasData(
                        new
                        {
                            Id = "492b0ae6-556b-4b77-8047-3459e5773c5e",
                            BookId = "68cbca3f-7cba-4713-9677-33fdafaa3d48",
                            Quantity = 1007,
                            StockId = 1
                        },
                        new
                        {
                            Id = "b3550b46-f3ae-4e56-a397-a039dea53ce2",
                            BookId = "3e5f4b04-f71b-449c-bfba-15e83eb9ab13",
                            Quantity = 757,
                            StockId = 2
                        },
                        new
                        {
                            Id = "bf94de80-ae6a-4787-aa91-ec5b5a586d8f",
                            BookId = "42d90b2a-f63d-4f11-bb0d-16feaf7152f2",
                            Quantity = 1979,
                            StockId = 1
                        },
                        new
                        {
                            Id = "155e97d3-2a2b-4eee-9687-0db4970c68c7",
                            BookId = "e169d412-f8af-4770-8aa7-8fe5d6c5a89f",
                            Quantity = 29,
                            StockId = 2
                        },
                        new
                        {
                            Id = "4c30ada8-2723-4295-bd8c-9e0ce3c49b90",
                            BookId = "17018893-e88b-4395-969e-5bf0c0729dfd",
                            Quantity = 1093,
                            StockId = 1
                        },
                        new
                        {
                            Id = "f12e68aa-036f-455b-9e4f-c640202bceaa",
                            BookId = "336f32a5-ed86-458a-8a3f-123737f6becb",
                            Quantity = 1987,
                            StockId = 1
                        },
                        new
                        {
                            Id = "1d176b50-5ea8-438b-8d46-0253171efd9e",
                            BookId = "967569be-5358-4274-886d-43cc52751e67",
                            Quantity = 1524,
                            StockId = 1
                        },
                        new
                        {
                            Id = "641f5546-105f-42a5-af28-1007d55cbdad",
                            BookId = "8cf43f33-0230-4819-b22a-496cd8ed69b1",
                            Quantity = 156,
                            StockId = 1
                        },
                        new
                        {
                            Id = "a0af9e2d-a4f6-4806-9ff7-cb7f4bfe34a1",
                            BookId = "315a7f9c-038b-4189-9096-56ec0a8a7d6d",
                            Quantity = 1150,
                            StockId = 1
                        },
                        new
                        {
                            Id = "13358875-9baf-4891-910e-ae2e6ecd314d",
                            BookId = "b5d2c12b-aa6b-4257-bdcd-5236d7d12388",
                            Quantity = 1809,
                            StockId = 2
                        },
                        new
                        {
                            Id = "6475268c-e5ee-47c1-9c77-64ebabf0e0e3",
                            BookId = "80597f36-d7ca-4d01-a801-9443643cc2b2",
                            Quantity = 1055,
                            StockId = 1
                        },
                        new
                        {
                            Id = "100ecedc-d5e2-4f1b-a375-6c0fdd1d9d07",
                            BookId = "cb9d22a0-e3ab-44ee-a093-330dd05e1f16",
                            Quantity = 875,
                            StockId = 2
                        },
                        new
                        {
                            Id = "4a8111fc-ee67-4abc-aee1-2503f7c4be98",
                            BookId = "0acfe7e3-4386-4d86-a4bd-a7ab92b69752",
                            Quantity = 545,
                            StockId = 1
                        },
                        new
                        {
                            Id = "cc7de689-6eb0-46bc-bfae-01b4f9ec7960",
                            BookId = "8d08172a-6577-4ea3-a0b8-a5643ab80391",
                            Quantity = 1156,
                            StockId = 1
                        },
                        new
                        {
                            Id = "765aa234-25fc-45c7-abbd-fae34706c559",
                            BookId = "83ddc51b-85ed-4974-8942-1ccf4cedf691",
                            Quantity = 1682,
                            StockId = 2
                        },
                        new
                        {
                            Id = "6c79ff3a-d322-4413-a0f5-886c9d71a2d2",
                            BookId = "055c86ee-226d-47a9-99a3-f33a846a11ac",
                            Quantity = 760,
                            StockId = 1
                        },
                        new
                        {
                            Id = "e84fbf17-ca4d-4d3f-a11f-9b6f32b81201",
                            BookId = "63af3195-bb7a-43c5-8cda-0f92115b0831",
                            Quantity = 803,
                            StockId = 2
                        },
                        new
                        {
                            Id = "f415fbb9-0053-49b6-b1d9-2e2876ff9d6f",
                            BookId = "04d6a1d0-2371-4ac1-b02b-1c3d6235a1ca",
                            Quantity = 1455,
                            StockId = 2
                        },
                        new
                        {
                            Id = "219df57d-2c7b-4afe-aea4-75b5bb93ef76",
                            BookId = "486b0b35-ca79-42d3-aa1e-016ee05acc72",
                            Quantity = 1077,
                            StockId = 1
                        },
                        new
                        {
                            Id = "3ff51c29-e942-4422-b58a-dd3a2c1b1be1",
                            BookId = "fca422fb-c417-46a4-b7cb-da0f48fd8447",
                            Quantity = 605,
                            StockId = 1
                        });
                });

            modelBuilder.Entity("OnDigit.Core.Models.UserFavoriteModel.UserFavorite", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("UserFavorites");
                });

            modelBuilder.Entity("OnDigit.Core.Models.UserLoginHistoryModel.UserLoginHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateLogined")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UsersLoginHistory");
                });

            modelBuilder.Entity("OnDigit.Core.Models.UserModel.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OnDigit.Core.Models.BookModel.Book", b =>
                {
                    b.HasOne("OnDigit.Core.Models.GenreModel.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("OnDigit.Core.Models.OrderBookModel.OrdersBooks", b =>
                {
                    b.HasOne("OnDigit.Core.Models.BookModel.Book", "Book")
                        .WithMany("OrdersBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnDigit.Core.Models.OrderModel.Order", "Order")
                        .WithMany("OrdersBooks")
                        .HasForeignKey("OrderNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OnDigit.Core.Models.OrderModel.Order", b =>
                {
                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.ResetTokenModel.ResetToken", b =>
                {
                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithOne("ResetToken")
                        .HasForeignKey("OnDigit.Core.Models.ResetTokenModel.ResetToken", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.ReviewModel.Review", b =>
                {
                    b.HasOne("OnDigit.Core.Models.BookModel.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.SessionModel.Session", b =>
                {
                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.StockModel.StockPackage", b =>
                {
                    b.HasOne("OnDigit.Core.Models.BookModel.Book", "Book")
                        .WithOne("StockPackage")
                        .HasForeignKey("OnDigit.Core.Models.StockModel.StockPackage", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnDigit.Core.Models.StockModel.Stock", "Stock")
                        .WithMany("StockPackages")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("OnDigit.Core.Models.UserFavoriteModel.UserFavorite", b =>
                {
                    b.HasOne("OnDigit.Core.Models.BookModel.Book", "Book")
                        .WithMany("UserFavorites")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithMany("UserFavorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.UserLoginHistoryModel.UserLoginHistory", b =>
                {
                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.BookModel.Book", b =>
                {
                    b.Navigation("OrdersBooks");

                    b.Navigation("Reviews");

                    b.Navigation("StockPackage");

                    b.Navigation("UserFavorites");
                });

            modelBuilder.Entity("OnDigit.Core.Models.GenreModel.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("OnDigit.Core.Models.OrderModel.Order", b =>
                {
                    b.Navigation("OrdersBooks");
                });

            modelBuilder.Entity("OnDigit.Core.Models.StockModel.Stock", b =>
                {
                    b.Navigation("StockPackages");
                });

            modelBuilder.Entity("OnDigit.Core.Models.UserModel.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ResetToken");

                    b.Navigation("Reviews");

                    b.Navigation("Sessions");

                    b.Navigation("UserFavorites");

                    b.Navigation("UserLogins");
                });
#pragma warning restore 612, 618
        }
    }
}
