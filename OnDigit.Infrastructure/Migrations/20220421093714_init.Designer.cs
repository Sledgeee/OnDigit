// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnDigit.Infrastructure.Data;

namespace OnDigit.Infrastructure.Migrations
{
    [DbContext(typeof(OnDigitDbContext))]
    [Migration("20220421093714_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OnDigit.Core.Models.EditionModel.Edition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<int>("RatingCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Editions");

                    b.HasData(
                        new
                        {
                            Id = "151208f3-6a57-4009-a49e-575b2e0ec634",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book1",
                            GenreId = 1,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            Name = "Book1",
                            Price = 9.99m,
                            Rating = 5f,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = "edd90f24-fd19-449d-878a-efd8b4a3a814",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book2",
                            GenreId = 2,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            Name = "Book2",
                            Price = 9.99m,
                            Rating = 4.4f,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = "fb48799c-7ce3-4e78-9077-1b41e98909b4",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book3",
                            GenreId = 3,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            Name = "Book3",
                            Price = 9.99m,
                            Rating = 3.2f,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = "081a5fc4-e3cd-4360-8d3f-432d63fef19f",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book4",
                            GenreId = 4,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            Name = "Book4",
                            Price = 9.99m,
                            Rating = 3f,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = "62235a64-7201-4504-8cf8-533583805eda",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book5",
                            GenreId = 5,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            Name = "Book5",
                            Price = 9.99m,
                            Rating = 2f,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = "f9a0497d-6df6-4549-9cee-2803a01836c8",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book6",
                            GenreId = 6,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            Name = "Book6",
                            Price = 9.99m,
                            Rating = 1f,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = "c61c4ef9-3ef4-4a4e-baf6-39772f813818",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book7",
                            GenreId = 7,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            Name = "Book7",
                            Price = 9.99m,
                            Rating = 0.6f,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = "2f9a21ad-d05d-48de-a616-66e8e5aea5b0",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book8",
                            GenreId = 8,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            Name = "Book8",
                            Price = 9.99m,
                            Rating = 0f,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = "37710d96-a080-465b-92be-bfa6302ff745",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book9",
                            GenreId = 9,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            Name = "Book9",
                            Price = 9.99m,
                            Rating = 0f,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = "5a6fd521-e026-43d9-b6a7-d92a386b81bb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book10",
                            GenreId = 10,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            Name = "Book10",
                            Price = 9.99m,
                            Rating = 0f,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = "278aa884-3113-4227-bfb1-a1753706d79f",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book11",
                            GenreId = 11,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            Name = "Book11",
                            Price = 9.99m,
                            Rating = 0f,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = "bde2aba1-570d-4eda-8da0-f7ef911d44a5",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book12",
                            GenreId = 12,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            Name = "Book12",
                            Price = 9.99m,
                            Rating = 0f,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = "17007453-ed46-4b55-b936-69b6b765eb6d",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book13",
                            GenreId = 13,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            Name = "Book13",
                            Price = 9.99m,
                            Rating = 0f,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = "610cd18a-0b4e-4a32-bceb-f8d28c5dfb6f",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book14",
                            GenreId = 14,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            Name = "Book14",
                            Price = 9.99m,
                            Rating = 0f,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = "3696174f-d765-4b07-9c70-9916f29e2ebe",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book15",
                            GenreId = 15,
                            ImageUri = "pack://application:,,,/Images/willbook.jpg",
                            Name = "Book15",
                            Price = 9.99m,
                            Rating = 0f,
                            RatingCount = 0
                        });
                });

            modelBuilder.Entity("OnDigit.Core.Models.GenreModel.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Detective"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Adventures"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Novel"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Scientific Book"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Folklore"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Humor"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Poetry"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Prose"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Children's Books"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Documentary Literature"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Education Book"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Equipment"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Business Literature"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Religious Literature"
                        });
                });

            modelBuilder.Entity("OnDigit.Core.Models.OrderEditionModel.OrderEdition", b =>
                {
                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("EditionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderNumber", "EditionId");

                    b.HasIndex("EditionId");

                    b.ToTable("OrderEditions");
                });

            modelBuilder.Entity("OnDigit.Core.Models.OrderModel.Order", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Number");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OnDigit.Core.Models.ResetTokenModel.ResetToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ResetToken");
                });

            modelBuilder.Entity("OnDigit.Core.Models.ReviewModel.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EditionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EditionId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("OnDigit.Core.Models.SessionModel.Session", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCanceledInAdvance")
                        .HasColumnType("bit");

                    b.Property<string>("MACHINE_KEY")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("OnDigit.Core.Models.UserFavoriteModel.UserFavorite", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EditionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "EditionId");

                    b.HasIndex("EditionId");

                    b.ToTable("UserFavorites");
                });

            modelBuilder.Entity("OnDigit.Core.Models.UserLoginHistoryModel.UserLoginHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateLogined")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UsersLoginHistory");
                });

            modelBuilder.Entity("OnDigit.Core.Models.UserModel.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OnDigit.Core.Models.EditionModel.Edition", b =>
                {
                    b.HasOne("OnDigit.Core.Models.GenreModel.Genre", "Genre")
                        .WithMany("Editions")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("OnDigit.Core.Models.OrderEditionModel.OrderEdition", b =>
                {
                    b.HasOne("OnDigit.Core.Models.EditionModel.Edition", "Edition")
                        .WithMany("OrdersEditions")
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OnDigit.Core.Models.OrderModel.Order", "Order")
                        .WithMany("OrdersEditions")
                        .HasForeignKey("OrderNumber")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Edition");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OnDigit.Core.Models.OrderModel.Order", b =>
                {
                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.ResetTokenModel.ResetToken", b =>
                {
                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithMany("ResetTokens")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.ReviewModel.Review", b =>
                {
                    b.HasOne("OnDigit.Core.Models.EditionModel.Edition", "Edition")
                        .WithMany("Reviews")
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Edition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.SessionModel.Session", b =>
                {
                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.UserFavoriteModel.UserFavorite", b =>
                {
                    b.HasOne("OnDigit.Core.Models.EditionModel.Edition", "Edition")
                        .WithMany("UserFavorites")
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithMany("UserFavorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Edition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.UserLoginHistoryModel.UserLoginHistory", b =>
                {
                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.EditionModel.Edition", b =>
                {
                    b.Navigation("OrdersEditions");

                    b.Navigation("Reviews");

                    b.Navigation("UserFavorites");
                });

            modelBuilder.Entity("OnDigit.Core.Models.GenreModel.Genre", b =>
                {
                    b.Navigation("Editions");
                });

            modelBuilder.Entity("OnDigit.Core.Models.OrderModel.Order", b =>
                {
                    b.Navigation("OrdersEditions");
                });

            modelBuilder.Entity("OnDigit.Core.Models.UserModel.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ResetTokens");

                    b.Navigation("Reviews");

                    b.Navigation("Sessions");

                    b.Navigation("UserFavorites");

                    b.Navigation("UserLogins");
                });
#pragma warning restore 612, 618
        }
    }
}
