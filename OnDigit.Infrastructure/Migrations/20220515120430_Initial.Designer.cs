// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnDigit.Infrastructure.Data;

#nullable disable

namespace OnDigit.Infrastructure.Migrations
{
    [DbContext(typeof(OnDigitDbContext))]
    [Migration("20220515120430_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("OnDigit.Core.Models.BookModel.Book", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("varchar(8000)");

                    b.Property<decimal>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUri")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<float>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f);

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = "72274ab2-9040-487f-8b0d-cf3f57e506bd",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description1",
                            Discount = 0m,
                            GenreId = 5,
                            ImageUri = "https://ondigit.pp.ua/images/1.jpg",
                            IsAvailable = true,
                            Name = "Book1",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "415f69e7-9574-4a00-8bc5-3161572d3791",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description2",
                            Discount = 97.455822343313294m,
                            GenreId = 6,
                            ImageUri = "https://ondigit.pp.ua/images/2.jpg",
                            IsAvailable = true,
                            Name = "Book2",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "d78d2892-4dbd-4d32-b1bd-a85e3a3593ac",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description3",
                            Discount = 0m,
                            GenreId = 3,
                            ImageUri = "https://ondigit.pp.ua/images/3.jpg",
                            IsAvailable = true,
                            Name = "Book3",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "3adc92f4-7ade-4249-9bab-524a63671bf9",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description4",
                            Discount = 20.73522034939494m,
                            GenreId = 1,
                            ImageUri = "https://ondigit.pp.ua/images/4.jpg",
                            IsAvailable = true,
                            Name = "Book4",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "6e0c0aee-7f10-48d6-8e5f-36989df90eef",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description5",
                            Discount = 0m,
                            GenreId = 4,
                            ImageUri = "https://ondigit.pp.ua/images/5.jpg",
                            IsAvailable = true,
                            Name = "Book5",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "35a7800f-7235-4853-9818-63b56896647f",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description6",
                            Discount = 84.43771224102149m,
                            GenreId = 12,
                            ImageUri = "https://ondigit.pp.ua/images/6.jpg",
                            IsAvailable = true,
                            Name = "Book6",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "b4da3536-ccef-4c14-86d6-947e02ebec2f",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description7",
                            Discount = 0m,
                            GenreId = 3,
                            ImageUri = "https://ondigit.pp.ua/images/7.jpg",
                            IsAvailable = true,
                            Name = "Book7",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "4700dffa-1674-4f24-9dbc-f243e855f9f0",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description8",
                            Discount = 27.390384280668718m,
                            GenreId = 10,
                            ImageUri = "https://ondigit.pp.ua/images/8.jpg",
                            IsAvailable = true,
                            Name = "Book8",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "7ed19017-cdde-4ba7-81ed-377665d15a07",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description9",
                            Discount = 93.762391270185747m,
                            GenreId = 3,
                            ImageUri = "https://ondigit.pp.ua/images/9.jpg",
                            IsAvailable = true,
                            Name = "Book9",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "0ff6cbd4-6fe8-44dc-bafe-2ad3c20d823b",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description10",
                            Discount = 0m,
                            GenreId = 9,
                            ImageUri = "https://ondigit.pp.ua/images/10.jpg",
                            IsAvailable = true,
                            Name = "Book10",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "9b6e8ff3-733a-42d8-b3d9-1071f09b6a81",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description11",
                            Discount = 0m,
                            GenreId = 6,
                            ImageUri = "https://ondigit.pp.ua/images/11.jpg",
                            IsAvailable = true,
                            Name = "Book11",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "5d722c96-b6f4-4bf8-835a-4eefdf4c5a3b",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description12",
                            Discount = 65.154772200787822m,
                            GenreId = 2,
                            ImageUri = "https://ondigit.pp.ua/images/12.jpg",
                            IsAvailable = true,
                            Name = "Book12",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "7c9857ea-0caa-4778-b4cb-cef4ddd37140",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description13",
                            Discount = 51.311348782572056m,
                            GenreId = 4,
                            ImageUri = "https://ondigit.pp.ua/images/13.jpg",
                            IsAvailable = true,
                            Name = "Book13",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "35d82638-cb15-45a6-a1cd-e17d29b80c78",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description14",
                            Discount = 0m,
                            GenreId = 12,
                            ImageUri = "https://ondigit.pp.ua/images/14.jpg",
                            IsAvailable = true,
                            Name = "Book14",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "ed4e80bd-81ef-45a6-9676-723f56835355",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description15",
                            Discount = 0m,
                            GenreId = 1,
                            ImageUri = "https://ondigit.pp.ua/images/15.jpg",
                            IsAvailable = true,
                            Name = "Book15",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "0ceb749d-8c2a-4322-b238-fd3a5fe0c61e",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description16",
                            Discount = 68.394770304273843m,
                            GenreId = 5,
                            ImageUri = "https://ondigit.pp.ua/images/16.jpg",
                            IsAvailable = true,
                            Name = "Book16",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "25fee052-f07b-46c4-8efb-f5a815bd54fa",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description17",
                            Discount = 0m,
                            GenreId = 10,
                            ImageUri = "https://ondigit.pp.ua/images/17.jpg",
                            IsAvailable = true,
                            Name = "Book17",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "754922c8-5650-4519-af56-551507d6f073",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description18",
                            Discount = 54.362080224991553m,
                            GenreId = 12,
                            ImageUri = "https://ondigit.pp.ua/images/18.jpg",
                            IsAvailable = true,
                            Name = "Book18",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "297ba92e-ffab-4f95-aa46-e50551e954cd",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description19",
                            Discount = 13.887434502053357m,
                            GenreId = 12,
                            ImageUri = "https://ondigit.pp.ua/images/19.jpg",
                            IsAvailable = true,
                            Name = "Book19",
                            Price = 9.99m,
                            Rating = 0f
                        },
                        new
                        {
                            Id = "9aec4194-8f88-4f89-80bf-63828f825b80",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book description20",
                            Discount = 22.850157141686718m,
                            GenreId = 14,
                            ImageUri = "https://ondigit.pp.ua/images/20.jpg",
                            IsAvailable = true,
                            Name = "Book20",
                            Price = 9.99m,
                            Rating = 0f
                        });
                });

            modelBuilder.Entity("OnDigit.Core.Models.GenreModel.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Detective"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Adventures"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Novel"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Scientific book"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Folklore"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Humor"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Poetry"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Prose"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Childrens book"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Documentary literature"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Education book"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Equipment"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Business literature"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Religious literature"
                        });
                });

            modelBuilder.Entity("OnDigit.Core.Models.OrderBookModel.OrdersBooks", b =>
                {
                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("BookId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderNumber", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("OrdersBooks");
                });

            modelBuilder.Entity("OnDigit.Core.Models.OrderModel.Order", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("DateOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DeliveryAddress")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("DeliveryCompany")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Fullname")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("OrderStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("PayStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalBooksQuantity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("Number");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OnDigit.Core.Models.PaymentModel.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("DatePayment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("OnDigit.Core.Models.PaymentModel.Wallet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CVV")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ExpiryDate")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("OnDigit.Core.Models.ResetTokenModel.ResetToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ResetTokens");
                });

            modelBuilder.Entity("OnDigit.Core.Models.ReviewModel.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BookId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("OnDigit.Core.Models.SaleModel.Sale", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BookId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime>("DateSaled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("OnDigit.Core.Models.SessionModel.Session", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsCanceledInAdvance")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MACHINE_KEY")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("OnDigit.Core.Models.UserFavoriteModel.UserFavorite", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BookId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("UserFavorites");
                });

            modelBuilder.Entity("OnDigit.Core.Models.UserLoginHistoryModel.UserLoginHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DateLogined")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UsersLoginHistory");
                });

            modelBuilder.Entity("OnDigit.Core.Models.UserModel.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OnDigit.Core.Models.WarehouseModel.Package", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BookId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.HasIndex("WarehouseId");

                    b.ToTable("Packages");

                    b.HasData(
                        new
                        {
                            Id = "026c2772-df24-4c0d-a90a-7efcdb9a4ad3",
                            BookId = "72274ab2-9040-487f-8b0d-cf3f57e506bd",
                            Quantity = 84,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = "cbb6d249-f7f6-46d9-afb0-a20551b35526",
                            BookId = "415f69e7-9574-4a00-8bc5-3161572d3791",
                            Quantity = 56,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = "2fb272f0-c927-41ca-8e4d-45bd6da2bd1f",
                            BookId = "d78d2892-4dbd-4d32-b1bd-a85e3a3593ac",
                            Quantity = 68,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = "fae55273-f0d1-4bc9-8717-733c84eddd5c",
                            BookId = "3adc92f4-7ade-4249-9bab-524a63671bf9",
                            Quantity = 296,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = "8903dcd8-6c92-40cb-a0cc-b10f7524e50e",
                            BookId = "6e0c0aee-7f10-48d6-8e5f-36989df90eef",
                            Quantity = 328,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = "f3e7bafb-88df-40a4-8fdd-684a660e5c93",
                            BookId = "35a7800f-7235-4853-9818-63b56896647f",
                            Quantity = 4,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = "dda6a3c9-14ac-493d-9656-01eccf1501ac",
                            BookId = "b4da3536-ccef-4c14-86d6-947e02ebec2f",
                            Quantity = 380,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = "24dfd26d-c952-4635-b22c-ab63592f6375",
                            BookId = "4700dffa-1674-4f24-9dbc-f243e855f9f0",
                            Quantity = 292,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = "2909d12d-fab3-4777-9fc7-73122041c624",
                            BookId = "7ed19017-cdde-4ba7-81ed-377665d15a07",
                            Quantity = 499,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = "d18275a8-3f9f-4018-b7f9-2c5cd4f36b1b",
                            BookId = "0ff6cbd4-6fe8-44dc-bafe-2ad3c20d823b",
                            Quantity = 262,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = "a776eb13-9b20-48ba-934c-25c27ad0171c",
                            BookId = "9b6e8ff3-733a-42d8-b3d9-1071f09b6a81",
                            Quantity = 211,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = "80ac8266-6358-4a7b-9a6a-29e4b7d881b8",
                            BookId = "5d722c96-b6f4-4bf8-835a-4eefdf4c5a3b",
                            Quantity = 462,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = "0e007779-bf77-4215-844a-78d4755e8f85",
                            BookId = "7c9857ea-0caa-4778-b4cb-cef4ddd37140",
                            Quantity = 66,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = "fd7c78d1-006a-49b4-8eb4-bf26b42e3562",
                            BookId = "35d82638-cb15-45a6-a1cd-e17d29b80c78",
                            Quantity = 34,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = "1322f2f3-a89b-4d93-ad86-01ca33a4e0f2",
                            BookId = "ed4e80bd-81ef-45a6-9676-723f56835355",
                            Quantity = 377,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = "47ad52a4-5052-43d3-9df8-dbee7002bcb0",
                            BookId = "0ceb749d-8c2a-4322-b238-fd3a5fe0c61e",
                            Quantity = 322,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = "aa82ba88-b2e8-4352-8ba2-1b9b5daa414a",
                            BookId = "25fee052-f07b-46c4-8efb-f5a815bd54fa",
                            Quantity = 378,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = "3181d7ad-0f55-4d97-9056-82b034498f66",
                            BookId = "754922c8-5650-4519-af56-551507d6f073",
                            Quantity = 150,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = "831f62c3-164a-42ed-977e-57c743a8eca2",
                            BookId = "297ba92e-ffab-4f95-aa46-e50551e954cd",
                            Quantity = 96,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = "329697d6-2945-409b-b3f5-e15d07d9755e",
                            BookId = "9aec4194-8f88-4f89-80bf-63828f825b80",
                            Quantity = 36,
                            WarehouseId = 2
                        });
                });

            modelBuilder.Entity("OnDigit.Core.Models.WarehouseModel.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Khmelnytskyi",
                            Street = "Institutska 11/3"
                        },
                        new
                        {
                            Id = 2,
                            City = "Polonne",
                            Street = "Gerasymchuka 12"
                        });
                });

            modelBuilder.Entity("OnDigit.Core.Models.BookModel.Book", b =>
                {
                    b.HasOne("OnDigit.Core.Models.GenreModel.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("OnDigit.Core.Models.OrderBookModel.OrdersBooks", b =>
                {
                    b.HasOne("OnDigit.Core.Models.BookModel.Book", "Book")
                        .WithMany("OrdersBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnDigit.Core.Models.OrderModel.Order", "Order")
                        .WithMany("OrdersBooks")
                        .HasForeignKey("OrderNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OnDigit.Core.Models.OrderModel.Order", b =>
                {
                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.PaymentModel.Payment", b =>
                {
                    b.HasOne("OnDigit.Core.Models.OrderModel.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("OnDigit.Core.Models.PaymentModel.Payment", "OrderNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.PaymentModel.Wallet", b =>
                {
                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.ResetTokenModel.ResetToken", b =>
                {
                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithOne("ResetToken")
                        .HasForeignKey("OnDigit.Core.Models.ResetTokenModel.ResetToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.ReviewModel.Review", b =>
                {
                    b.HasOne("OnDigit.Core.Models.BookModel.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.SaleModel.Sale", b =>
                {
                    b.HasOne("OnDigit.Core.Models.BookModel.Book", "Book")
                        .WithMany("Sales")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("OnDigit.Core.Models.SessionModel.Session", b =>
                {
                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.UserFavoriteModel.UserFavorite", b =>
                {
                    b.HasOne("OnDigit.Core.Models.BookModel.Book", "Book")
                        .WithMany("UserFavorites")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithMany("UserFavorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.UserLoginHistoryModel.UserLoginHistory", b =>
                {
                    b.HasOne("OnDigit.Core.Models.UserModel.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnDigit.Core.Models.WarehouseModel.Package", b =>
                {
                    b.HasOne("OnDigit.Core.Models.BookModel.Book", "Book")
                        .WithOne("Package")
                        .HasForeignKey("OnDigit.Core.Models.WarehouseModel.Package", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnDigit.Core.Models.WarehouseModel.Warehouse", "Warehouse")
                        .WithMany("Packages")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("OnDigit.Core.Models.BookModel.Book", b =>
                {
                    b.Navigation("OrdersBooks");

                    b.Navigation("Package");

                    b.Navigation("Reviews");

                    b.Navigation("Sales");

                    b.Navigation("UserFavorites");
                });

            modelBuilder.Entity("OnDigit.Core.Models.GenreModel.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("OnDigit.Core.Models.OrderModel.Order", b =>
                {
                    b.Navigation("OrdersBooks");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("OnDigit.Core.Models.UserModel.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("ResetToken");

                    b.Navigation("Reviews");

                    b.Navigation("Sessions");

                    b.Navigation("UserFavorites");

                    b.Navigation("UserLogins");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("OnDigit.Core.Models.WarehouseModel.Warehouse", b =>
                {
                    b.Navigation("Packages");
                });
#pragma warning restore 612, 618
        }
    }
}
